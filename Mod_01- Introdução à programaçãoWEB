/*Cálculo de IMC
Crie um programa para calcular o IMC e nível de obesidade de uma pessoa.

Comece criando constantes para armazenar o nome, peso, altura e sexo de uma pessoa*/


const nome = ' Rai '
const peso = 100        
const altura = 1.74

const imc = peso / (altura * altura)

if(imc >= 30 || imc == 29.9 )
{
    console.log(`${nome} , Voce esta acima do peso`)
} else {
    console.log(`${nome} , Voce não esta acima do peso`)
}

/*  Cálculo de aposentadoria
Crie um programa para calcular a aposentadoria de uma pessoa.

Obs.: Esse cálculo é fictício, dentro da aposentadoria existem muitos outros fatores para serem levados em conta :)

Comece criando constantes para armazenar nome, sexo, idade e contribuicao(em anos)  */

const nome = 'fernando'
const idade = 60
const sexo = 'M'
const contribuicao = 35

const soma = idade + contribuicao

if(sexo == 'F' && contribuicao == 30 || sexo == 'M' && contribuicao == 35){
    if(sexo == 'F' && soma == 85 || sexo == 'M' && soma == 95){
        console.log(`${nome} , Você pode se aposentar`)
    } else {
        console.log(`${nome} , Voce ainda não pode se aposentar`)
    }
} else {
    console.log(`${nome} , Voce ainda não pode se aposentar`)
}

/*  Construção e impressão de objetos
Crie um programa que armazena dados da empresa Rocketseat dentro de um objeto chamado empresa.  */


const empresa = {
    nome : 'RocketSeat',
    Cor: 'Roxo',
    Foco: 'Programação',
    Endereço:{
        rua: 'Rua Guilherme Gembala',
        numero: 260
    }
}
console.log(`A empresa ${empresa.nome} , esta localizada na ${empresa.Endereço.rua} , ${empresa.Endereço.numero}`)


/*  Crie um programa com um objeto para armazenar dados de um programador como nome, idade e tecnologias que trabalha.

Um programador pode trabalhar com várias tecnologias, por isso armazene essas tecnologias em um array.

As tecnologias também devem ser objetos contendo nome e especialidade  */




const programador =  {
        nome: 'Fulano',
        idade: 25,
        tecnologia:[
            { nome: 'c#', especialidade: 'Desktop' },
            { nome: 'Python', especialidade: 'Data Science' },
            { nome: 'JavaScript', especialidade: 'Web/Mobile' }      
           
        ]  
    
    }

    console.log(`O Usuario ${programador.nome}, tem ${programador.idade} anos e usa as tecnologias
    ${programador.tecnologia[0].nome}, com especialidades em ${programador.tecnologia[0].especialidade}`)



/*   Usuários e tecnologias
Crie um programa que armazena um array de usuários (objetos), cada usuário tem um nome e suas tecnologias (novo array)   */


const usuarios = [
  { nome: "Carlos", tecnologias: ["HTML", "CSS"] },
  { nome: "Jasmine", tecnologias: ["JavaScript", "CSS"] },
  { nome: "Tuane", tecnologias: ["HTML", "Node.js"] }
]

for(let usuario of usuarios){
    console.log(`${usuario.nome} , trabalha com ${usuario.tecnologias.join(',')}` )
}







/* Baseado no desafio anterior, utilize a mesma lista de usuários construída.
Crie uma função que recebe os dados de um objeto de usuário e retorna SE o usuário trabalha com CSS ou não. Essa função deve retornar um boolean true/false.   */ 





const usuarios = [
  { nome: "Carlos", tecnologias: ["HTML", "CSS"] },
  { nome: "Jasmine", tecnologias: ["JavaScript", "CSS"] },
  { nome: "Tuane", tecnologias: ["HTML", "Node.js"] }
]

for(let usuario of usuarios){
    console.log(`${usuario.nome} , trabalha com ${usuario.tecnologias.join(',')}` )
}



function checaSeUsuarioUsaCSS(usuario) {
    for(let tecnologia of usuario.tecnologias){
        if(tecnologia == 'CSS') return true
        
    }
    return false

  }

  for (let i = 0; i < usuarios.length; i++) {
    const usuarioTrabalhaComCSS = checaSeUsuarioUsaCSS(usuarios[i])
  
    if (usuarioTrabalhaComCSS) {
      console.log(`O usuário ${usuarios[i].nome} trabalha com CSS`)
    }
  }


/*   Soma de despesas e receitas
Crie um programa que calcula a soma de receitas e despesas de usuários e no fim retorna o saldo (receitas - despesas).   */


const usuarios = [
    {
      nome: 'Salvio',
      receitas: [115.3, 48.7, 98.3, 14.5],
      despesas: [85.3, 13.5, 19.9]
    },
    {
      nome: 'Marcio',
      receitas: [24.6, 214.3, 45.3],
      despesas: [185.3, 12.1, 120.0]
    },
    {
      nome: 'Lucia',
      receitas: [9.8, 120.3, 340.2, 45.3],
      despesas: [450.2, 29.9]
    }
  ]

  function calculaSaldo(receitas, despesas) {
    const somaReceitas = somaNumeros(receitas)
    const somaDespesas = somaNumeros(despesas)

    return somaReceitas - somaDespesas

  }


  function somaNumeros(numeros) {
    let soma = 0
    
    for(let numero of numeros){

        soma = soma + numero

    }
    return soma
  }

  for (let usuario of usuarios){

    const saldo = calculaSaldo(usuario.receitas,usuario.despesas)

    if (saldo > 0){

        console.log(`${usuario.nome} tem um saldo Positivo de ${saldo.toFixed(2)}`)
    }else {
        console.log(`${usuario.nome} tem um saldo Negativo de ${saldo.toFixed(2)}`)
    }
  }



/*   Intro
Crie um programa para realizar operações bancárias na conta de um usuário.

Comece criando um objeto com o nome do usuário, suas transações e saldo.

As transações (transactions) devem iniciar como um array vazio [] e o saldo (balance) em 0 (zero).

Adicionar transações
Crie uma função createTransaction para adicionar uma nova transação no array de transações de um usuário, essa função deve receber como parâmetro um objeto de transação que tem o seguinte formato:

{
  type: 'credit',
  value: 50.5
}


Relatórios
Crie uma função chamada getHigherTransactionByType que recebe como parâmetro o tipo de transação credit/debit, percorre as transações do usuário e retorna o objeto da transação de maior valor com aquele tipo:

getHigherTransactionByType("credit"); // { type: 'credit', value: 120 }



Crie uma função chamada getAverageTransactionValue que retorna o valor médio das transações de um usuário independente do seu tipo:
getAverageTransactionValue(); // 83.3


Crie uma função chamada getTransactionsCount que retorna o número de transações de cada tipo credit/debit, o retorno da função deve ser um objeto e seguir exatamente como o modelo apresentado abaixo:
getTransactionsCount(); // { credit: 5, debit: 3 }


   */ 


// Operações bancárias

const user = {
    name: 'Mariana',
    transactions: [],
    balance: 0
}

// Adicionar transações

function createTransaction(transaction) {
    user.transactions.push(transaction)

    if (transaction.type === 'credit') {
        user.balance = user.balance + transaction.value
    } else {
        user.balance = user.balance - transaction.value
    }
}

// Relatórios

function getHigherTransactionByType(type) {
    let higherTransaction
    let higherValue = 0

    for (let transaction of user.transactions) {
        if (transaction.type == type && transaction.value > higherValue) {
            higherValue = transaction.value
            higherTransaction = transaction
        }
    }

    return higherTransaction
}

function getAverageTransactionValue() {
    let sum = 0

    for(let transaction of user.transactions) {
        sum += transaction.value
    }

    return sum / user.transactions.length
}

function getTransactionsCount() {
    let count = {
        credit: 0,
        debit: 0,
    }
    for (let transaction of user.transactions) {
        if (transaction.type === 'credit')
            count.credit++
        else
            count.debit++
    }

    return count
}


createTransaction({ type: 'credit', value: 50 })
createTransaction({ type: 'credit', value: 120 })
createTransaction({ type: 'debit', value: 80 })
createTransaction({ type: 'debit', value: 30 })

console.log(user.balance) 

console.log(getHigherTransactionByType('credit')) 
console.log(getHigherTransactionByType('debit')) 
console.log(getAverageTransactionValue()) 

console.log(getTransactionsCount()) 

